import java.util.*;

class Solution {
    /*
        1. 윗 변을 기준으로 N번째 큰 정삼각형(혹은 평행사변형)은 N-1번째를 제외한 이전 요소에는 영향 X
        2. N+1번째 요소가 생성될 수 있는 패턴에는 영향이 없으나, 전체 가짓수에는 영향을 받음.
        3. 따라서 DP로 생성할 수 있다.
        
        예시 2번에 N번째 요소가 N-1번째의 패턴에 의해 영향받는 예시가 있다.
        N번째가 TOP인 경우
        - N-1 끝처리가 삼각형 = 4가지 패턴
        - N-1 끝처리가 마름모 = 3가지 패턴
        
        N번째가 TOP이 아닌 경우
        - N-1 끝처리가 삼각형 = 3가지 패턴
        - N-1이 마름모 = 2가지 패턴
        
            TOP(0, 1)
        DP[0] = 0, 0
        DP[1] = 3, 4
        DP[2] = [8, 11]
                [~~~, ~~~]
                
        DP[N+1][2]에서 
        DP[N+1][0] 은 끝처리가 삼각형인 개수,
        DP[N+1][1] 은 끝처리가 마름모인 개수
        
        N+1의 TOP이 0일 때
        DP[N+1][0] = DP[N][0] + DP[N][1];
        DP[N+1][1] = DP[N][0] + DP[N][1];
        
        N+1의 TOP이 1일 때
        DP[N+1][0] = DP[N][0]*2 + DP[N][1];
        DP[N+1][1] = DP[N][0] + DP[N][1];
    */
    public int solution(int n, int[] tops) {
        int answer = 0;
        int DIV = 10007;
        
        int[][] dp = new int[n+1][2];
        dp[0][0] = dp[0][1] = 0;
        if(tops[0] == 1){
            dp[1][0] = 3; dp[1][1] = 1;    
        } else{
            dp[1][0] = 2; dp[1][1] = 1;
        }
        
        
        for(int i = 2; i<=n; i++){
            if(tops[i-1] == 1){
                dp[i][0] = (dp[i-1][0] * 3 + dp[i-1][1]*2)%DIV;
                dp[i][1] = (dp[i-1][0] + dp[i-1][1])%DIV;
            } else{
                dp[i][0] = (dp[i-1][0] * 2 + dp[i-1][1])%DIV;
                dp[i][1] = (dp[i-1][0] + dp[i-1][1])%DIV;
            }
        }
        
        return (dp[n][0] + dp[n][1]) % DIV;
    }
}